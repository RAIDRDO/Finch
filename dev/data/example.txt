Table of Contents  
=================  
  
* test
* test
 
  
  
| First Header | Second Header |  
| ------------- | ------------- |  
| Content Cell | Content Cell |  
| Content Cell | Content Cell |  


# H1
## H2
### H3
#### H4
##### H5
###### H6

Alternatively, for H1 and H2, an underline-ish style:

Alt-H1
======

Alt-H2
------



  

Emphasis, aka italics, with *asterisks* or _underscores_.

Strong emphasis, aka bold, with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough uses two tildes. ~~Scratch this.~~
  

1. First ordered list item
2. Another item
⋅⋅* Unordered sub-list. 
1. Actual numbers don't matter, just that it's a number
⋅⋅1. Ordered sub-list
4. And another item.

⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).

⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)

* Unordered list can use asterisks
- Or minuses
+ Or pluses



[I'm an inline-style link](https://www.google.com)

[I'm an inline-style link with title](https://www.google.com "Google's Homepage")

[I'm a reference-style link][Arbitrary case-insensitive reference text]

[I'm a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself].

URLs and URLs in angle brackets will automatically get turned into links. 
http://www.example.com or <http://www.example.com> and sometimes 
example.com (but not on Github, for example).

Some text to show that the reference links can follow later.

[arbitrary case-insensitive reference text]: https://www.mozilla.org
[1]: http://slashdot.org
[link text itself]: http://www.reddit.com



```javascript
var s = "JavaScript syntax highlighting";
alert(s);
```
 
```python
s = "Python syntax highlighting"
print s
```
 
```
No language indicated, so no syntax highlighting. 
But let's throw in a <b>tag</b>.
```

Here is a simple footnote[^1].

A footnote can also have multiple lines[^2].  

You can also use words, to fit your writing style more closely[^note].

[^1]: My reference.
[^2]: Every new line should be prefixed with 2 spaces.  
  This allows you to have a footnote with multiple lines.
[^note]:
    Named footnotes will still render with numbers instead of the text but allow easier identification and linking.  
    This footnote also has been made with a different syntax using 4 spaces for new lines.


Colons can be used to align columns.

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don't need to make the 
raw Markdown line up prettily. You can also use inline Markdown.

Markdown | Less | Pretty
--- | --- | ---
*Still* | `renders` | **nicely**
1 | 2 | 3



> Blockquotes are very handy in email to emulate reply text.
> This line is part of the same quote.

Quote break.

> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. 


Three or more...

---

Hyphens

***

Asterisks

___

Underscores


Here's a line for us to start with.

This line is separated from the one above by two newlines, so it will be a *separate paragraph*.

This line is also a separate paragraph, but...
This line is only separated by a single newline, so it's a separate line in the *same paragraph*.


```mermaid  
graph TD;  
A-->B;  
A-->C;  
B-->D;  
C-->D;  
```  
  
```mermaid  
graph LR;  
A-->B;  
A-->C;  
B-->D;  
C-->D;  
```  

```mermaid  
flowchart LR
    A[Hard edge] -->|Link text| B(Round edge)
    B --> C{Decision}
    C -->|One| D[Result one]
    C -->|Two| E[Result two]

  
```  
  
```mermaid  
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!

  
  
```  
  
```mermaid  
sequenceDiagram  
participant Alice  
participant John  
  
rect rgb(191, 223, 255)  
note right of Alice: Alice calls John.  
Alice->>+John: Hello John, how are you?  
rect rgb(200, 150, 255)  
Alice->>+John: John, can you hear me?  
John-->>-Alice: Hi Alice, I can hear you!  
end  
John-->>-Alice: I feel great!  
end  
Alice ->>+ John: Did you want to go to the game tonight?  
John -->>- Alice: Yeah! See you there.  
  
  
```  
  
```mermaid  
---  
title: Animal example  
---  
classDiagram  
note "From Duck till Zebra"  
Animal <|-- Duck  
note for Duck "can fly\ncan swim\ncan dive\ncan help in debugging"  
Animal <|-- Fish  
Animal <|-- Zebra  
Animal : +int age  
Animal : +String gender  
Animal: +isMammal()  
Animal: +mate()  
class Duck{  
+String beakColor  
+swim()  
+quack()  
}  
class Fish{  
-int sizeInFeet  
-canEat()  
}  
class Zebra{  
+bool is_wild  
+run()  
}  
  
```  
  
```mermaid  
---  
title: Simple sample  
---  
stateDiagram-v2  
[*] --> Still  
Still --> [*]  
  
Still --> Moving  
Moving --> Still  
Moving --> Crash  
Crash --> [*]  
  
```  
```mermaid  
erDiagram  
CUSTOMER ||--o{ ORDER : places  
CUSTOMER {  
string name  
string custNumber  
string sector  
}  
ORDER ||--|{ LINE-ITEM : contains  
ORDER {  
int orderNumber  
string deliveryAddress  
}  
LINE-ITEM {  
string productCode  
int quantity  
float pricePerUnit  
}  
  
```  
```mermaid  
journey  
title My working day  
section Go to work  
Make tea: 5: Me  
Go upstairs: 3: Me  
Do work: 1: Me, Cat  
section Go home  
Go downstairs: 5: Me  
Sit down: 5: Me  
  
```  
```mermaid  
gantt  
title A Gantt Diagram  
dateFormat YYYY-MM-DD  
section Section  
A task :a1, 2014-01-01, 30d  
Another task :after a1 , 20d  
section Another  
Task in sec :2014-01-12 , 12d  
another task : 24d  
  
```  
```mermaid  
pie showData  
title Key elements in Product X  
"Calcium" : 42.96  
"Potassium" : 50.05  
"Magnesium" : 10.01  
"Iron" : 5  
  
```  
```mermaid  
requirementDiagram  
  
requirement test_req {  
id: 1  
text: the test text.  
risk: high  
verifymethod: test  
}  
  
element test_entity {  
type: simulation  
}  
  
test_entity - satisfies -> test_req  
  
```  
  
  
```mermaid  
---  
title: Example Git diagram  
---  
gitGraph  
commit  
commit  
branch develop  
checkout develop  
commit  
commit  
checkout main  
merge develop  
commit  
commit  
  
```  
  
```mermaid  
C4Context  
title System Context diagram for Internet Banking System  
Enterprise_Boundary(b0, "BankBoundary0") {  
Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")  
Person(customerB, "Banking Customer B")  
Person_Ext(customerC, "Banking Customer C", "desc")  
  
Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")  
  
System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")  
  
Enterprise_Boundary(b1, "BankBoundary") {  
  
SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")  
  
System_Boundary(b2, "BankBoundary2") {  
System(SystemA, "Banking System A")  
System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.")  
}  
  
System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")  
SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")  
  
Boundary(b3, "BankBoundary3", "boundary") {  
SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.")  
SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")  
}  
}  
}  
  
BiRel(customerA, SystemAA, "Uses")  
BiRel(SystemAA, SystemE, "Uses")  
Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")  
Rel(SystemC, customerA, "Sends e-mails to")  
  
UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red")  
UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5")  
UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10")  
UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50")  
UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20")  
  
UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")  
  
  
  
```